---
name: authentik

networks:
  frontend:
    external: true
  backend:
    external: true

services:
  postgres:
    image: postgres:16.2
    container_name: authentik-db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - TZ=${TZ:-UTC}
    healthcheck:
      test:
        ["CMD-SHELL", 'pg_isready -d "${POSTGRES_DB}" -U "${POSTGRES_USER}"']
      start_period: 30s
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - ./data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - backend
    security_opt:
      - no-new-privileges:true
  redis:
    image: redis:7.2.4
    container_name: authentik-redis
    command: --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - ./redis-data:/data
    restart: unless-stopped
    networks:
      - backend
    security_opt:
      - no-new-privileges:true
  server:
    image: ghcr.io/goauthentik/server:2024.2.2
    container_name: authentik-server
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_POSTGRESQL__HOST: authentik-db
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
      # (Required)  To generate a secret key run the following command:
      #             echo $(openssl rand -base64 32)
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      # (Optional)  Enable Error Reporting
      # - AUTHENTIK_ERROR_REPORTING__ENABLED=${AUTHENTIK_ERROR_REPORTING:-false}
      # (Optional)  Enable Email Sending
      # - AUTHENTIK_EMAIL__HOST=${EMAIL_HOST:?error}
      # - AUTHENTIK_EMAIL__PORT=${EMAIL_PORT:-25}
      # - AUTHENTIK_EMAIL__USERNAME=${EMAIL_USERNAME:?error}
      # - AUTHENTIK_EMAIL__PASSWORD=${EMAIL_PASSWORD:?error}
      # - AUTHENTIK_EMAIL__USE_TLS=${EMAIL_USE_TLS:-false}
      # - AUTHENTIK_EMAIL__USE_SSL=${EMAIL_USE_SSL:-false}
      # - AUTHENTIK_EMAIL__TIMEOUT=${EMAIL_TIMEOUT:-10}
      # - AUTHENTIK_EMAIL__FROM=${EMAIL_FROM:?error}
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
    labels:
      traefik.enable: true
      traefik.http.services.authentik-prod-1.loadBalancer.server.port: 9000
      traefik.http.routers.authentik-prod-1-http.entrypoints: web
      traefik.http.routers.authentik-prod-1-http.rule: Host(`authentik.lhr1.jakerob.pro`)
      traefik.http.routers.authentik-prod-1-https.entrypoints: websecure
      traefik.http.routers.authentik-prod-1-https.rule: Host(`authentik.lhr1.jakerob.pro`)
      traefik.http.routers.authentik-prod-1-https.tls: true
      traefik.http.routers.authentik-prod-1-https.tls.certresolver: cloudflare
    depends_on:
      - postgres
      - redis
    networks:
      - frontend
      - backend
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
  worker:
    image: ghcr.io/goauthentik/server:2024.2.2
    container_name: authentik-worker
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_POSTGRESQL__HOST: authentik-db
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
      # (Required)  To generate a secret key run the following command:
      #             echo $(openssl rand -base64 32)
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      # (Optional)  Enable Error Reporting
      # AUTHENTIK_ERROR_REPORTING__ENABLED=${AUTHENTIK_ERROR_REPORTING:-false}
      # (Optional)  Enable Email Sending
      # - AUTHENTIK_EMAIL__HOST=${EMAIL_HOST:?error}
      # - AUTHENTIK_EMAIL__PORT=${EMAIL_PORT:-25}
      # - AUTHENTIK_EMAIL__USERNAME=${EMAIL_USERNAME:?error}
      # - AUTHENTIK_EMAIL__PASSWORD=${EMAIL_PASSWORD:?error}
      # - AUTHENTIK_EMAIL__USE_TLS=${EMAIL_USE_TLS:-false}
      # - AUTHENTIK_EMAIL__USE_SSL=${EMAIL_USE_SSL:-false}
      # - AUTHENTIK_EMAIL__TIMEOUT=${EMAIL_TIMEOUT:-10}
      # - AUTHENTIK_EMAIL__FROM=${EMAIL_FROM:?error}
    # (Optional)  When using the docker socket integration
    #             See more for the docker socket integration here:
    #             https://goauthentik.io/docs/outposts/integrations/docker
    # user: root
    networks:
      - backend
    volumes:
      # (Optional)  When using the docker socket integration
      - /var/run/docker.sock:/var/run/docker.sock
      - ./media:/media
      - ./certs:/certs
      - ./custom-templates:/templates
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
