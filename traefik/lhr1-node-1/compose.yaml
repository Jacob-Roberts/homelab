---
name: traefik

networks:
  frontend:
    # Contains all the services that will be routed to
    external: true
  internal:
    # Contains traefik, socket proxy, and traefik-tunnel
    external: false
    name: traefik_internal
  tunnel:
    # Contains all the services that will be routed to through the tunnel
    external: true

volumes:
  socket-proxy:

services:
  traefik:
    image: 11notes/traefik:3
    container_name: traefik-primary
    command:
      - "--configFile=/traefik/traefik.yaml"
    read_only: true
    security_opt:
      - no-new-privileges:true
    sysctls:
      # allow rootless container to access ports < 1024
      net.ipv4.ip_unprivileged_port_start: 80
    depends_on:
      socket-proxy:
        condition: service_healthy
        restart: true
    restart: unless-stopped

    ports:
      - 192.168.42.16:80:80/tcp
      - 192.168.42.16:443:443/tcp
    environment:
      CF_DNS_API_TOKEN: "${CF_DNS_API_TOKEN}"
      TZ: "${TZ:-Europe/London}"
    networks:
      - frontend
      - internal
    volumes:
      - ./config/traefik.yaml:/traefik/traefik.yaml:ro
      - ./config/conf:/traefik/conf:ro
      - ./config/certs:/traefik/certs:rw
      - ./config/plugins:/plugins-storage
        # access docker socket via proxy read-only
      - socket-proxy:/var/run
    labels:
      traefik.enable: true
      traefik.http.routers.traefik-prod-1-http.service: "api@internal"
      traefik.http.routers.traefik-prod-1-https.service: "api@internal"
      traefik.http.routers.traefik-prod-1-http.entrypoints: web
      traefik.http.routers.traefik-prod-1-http.rule: Host(`traefik.lhr1.jakerob.pro`)
      traefik.http.routers.traefik-prod-1-http.middlewares: "websecure-redirect-permanent@file"
      traefik.http.routers.traefik-prod-1-https.entrypoints: websecure
      traefik.http.routers.traefik-prod-1-https.rule: Host(`traefik.lhr1.jakerob.pro`)
      traefik.http.routers.traefik-prod-1-https.tls: true
      traefik.http.routers.traefik-prod-1-https.tls.certresolver: cloudflare
  traefik-certs-dumper:
    image: ldez/traefik-certs-dumper:v2.9.3
    volumes:
      - ./config/certs/:/certs
      - ./extract-certs.sh:/extract-certs.sh
      - ./synced-certs/:/synced-certs

    entrypoint: "sh -c ' while ! [ -e /certs/cloudflare-acme.json ] || ! [ `jq \".[] | .Certificates | length\" /certs/cloudflare-acme.json | jq -s \"add\" ` != 0 ]; do sleep 1 ; done && traefik-certs-dumper file --version v3 --watch --domain-subdir=true --source /certs/cloudflare-acme.json --dest /etc/traefik/certs --post-hook \"sh /extract-certs.sh\"'"
  traefik-tunnel:
    image: 11notes/traefik:3
    container_name: traefik-tunnel
    command:
      - "--configFile=/traefik/traefik.yaml"
    read_only: true
    security_opt:
      - no-new-privileges:true
    sysctls:
      # allow rootless container to access ports < 1024
      net.ipv4.ip_unprivileged_port_start: 80
    restart: unless-stopped

    ports:
      # Bind on Tailscale interface only
      - 100.89.27.79:80:80
      - 100.89.27.79:443:443
    environment:
      TZ: "${TZ:-Europe/London}"
    networks:
      - tunnel
      - internal
    volumes:
      - ./config-tunnel/traefik.yaml:/traefik/traefik.yaml:ro
      - ./config-tunnel/conf/:/traefik/conf/:ro
    labels:
      traefik.enable: true
      traefik.docker.network: traefik_internal
      traefik.http.services.traefiktunnel-prod-1.loadBalancer.server.port: 8080 # TODO: Expose this securely
      traefik.http.routers.traefiktunnel-prod-1-http.entrypoints: web
      traefik.http.routers.traefiktunnel-prod-1-http.rule: Host(`traefik-tunnel.lhr1.jakerob.pro`)
      traefik.http.routers.traefiktunnel-prod-1-http.middlewares: "websecure-redirect-permanent@file"
      traefik.http.routers.traefiktunnel-prod-1-https.entrypoints: websecure
      traefik.http.routers.traefiktunnel-prod-1-https.rule: Host(`traefik-tunnel.lhr1.jakerob.pro`)
      traefik.http.routers.traefiktunnel-prod-1-https.tls: true
      traefik.http.routers.traefiktunnel-prod-1-https.tls.certresolver: cloudflare
  socket-proxy:
    image: 11notes/socket-proxy:2
    container_name: traefik-socket-proxy
    read_only: true
    user: "0:${DOCKER_GROUP_ID:-990}"
    restart: unless-stopped

    networks:
      - internal
    volumes:
      # mount host docker socket, the :ro does not mean read-only for the socket, just for the actual file
      - /run/docker.sock:/run/docker.sock:ro
        # this socket is run as 1000:1000, not as root!
      - socket-proxy:/run/proxy
  whoami:
    image: traefik/whoami
    container_name: whoami-prod-1
    command: "--verbose"
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    networks:
      - frontend
    labels:
      traefik.enable: true
      traefik.http.routers.whoami-prod-1-http.entrypoints: web
      traefik.http.routers.whoami-prod-1-http.rule: Host(`whoami.lhr1.jakerob.pro`)
      traefik.http.routers.whoami-prod-1-http.middlewares: "websecure-redirect-permanent@file"
      traefik.http.routers.whoami-prod-1-https.entrypoints: websecure
      traefik.http.routers.whoami-prod-1-https.rule: Host(`whoami.lhr1.jakerob.pro`)
      traefik.http.routers.whoami-prod-1-https.tls: true
      traefik.http.routers.whoami-prod-1-https.tls.certresolver: cloudflare
