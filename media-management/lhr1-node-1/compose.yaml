---
name: media-management

networks:
  frontend:
    external: true
  internal:
    external: false

services:
  gluetun:
    image: docker.io/qmcgaw/gluetun:v3
    container_name: gluetun
    security_opt:
      - no-new-privileges:true
    cap_add:
      - NET_ADMIN
    restart: unless-stopped
    ports:
      - 8888:8888/tcp   # Gluetun Local Network HTTP proxy
      - 8388:8388/tcp   # Gluetun Local Network Shadowsocks
      - 8388:8388/udp   # Gluetun Local Network Shadowsocks
      - 8000:8000       # Gluetun control server
      - 6881:6881/tcp   # qBittorrent Torrent Port TCP
      - 6881:6881/udp   # qBittorrent Torrent Port UDP
    environment:
      - TZ=Europe/London
      - VPN_SERVICE_PROVIDER=protonvpn
      - VPN_TYPE=wireguard
      - "WIREGUARD_PRIVATE_KEY=${WIREGUARD_PRIVATE_KEY}"
      - FIREWALL_OUTBOUND_SUBNETS=192.168.0.0/16 # Internal network
      # Free VPN
      # - FREE_ONLY=on
      # Paid VPN
      - FREE_ONLY=off
      - VPN_PORT_FORWARDING=on
      - VPN_PORT_FORWARDING_PROVIDER=protonvpn
      - SERVER_COUNTRIES=United Kingdom
      - PORT_FORWARD_ONLY=on
      - "VPN_PORT_FORWARDING_UP_COMMAND=/bin/sh -c 'wget -O- --retry-connrefused --post-data \"json={\\\"listen_port\\\":{{PORTS}}}\" http://127.0.0.1:8080/api/v2/app/setPreferences 2>&1'"
    networks:
      - internal
      - frontend
    devices:
      - /dev/net/tun:/dev/net/tun
    volumes:
      - ./gluetun-config:/gluetun
      - ./gluetun-config/info:/tmp/gluetun
    hostname: gluetun
    labels:
      traefik.enable: true
      traefik.docker.network: frontend
      traefik.http.services.qbittorrent-prod-1.loadBalancer.server.port: 8080
      traefik.http.routers.qbittorrent-prod-1-http.service: qbittorrent-prod-1
      traefik.http.routers.qbittorrent-prod-1-https.service: qbittorrent-prod-1
      traefik.http.routers.qbittorrent-prod-1-http.entrypoints: web
      traefik.http.routers.qbittorrent-prod-1-http.rule: Host(`qbittorrent.lhr1.jakerob.pro`)
      traefik.http.routers.qbittorrent-prod-1-http.middlewares: "websecure-redirect-permanent@file"
      traefik.http.routers.qbittorrent-prod-1-https.entrypoints: websecure
      traefik.http.routers.qbittorrent-prod-1-https.rule: Host(`qbittorrent.lhr1.jakerob.pro`)
      traefik.http.routers.qbittorrent-prod-1-https.tls: true
      traefik.http.routers.qbittorrent-prod-1-https.tls.certresolver: cloudflare
      traefik.http.services.prowlarr-prod-1.loadBalancer.server.port: 9696
      traefik.http.routers.prowlarr-prod-1-http.service: prowlarr-prod-1
      traefik.http.routers.prowlarr-prod-1-https.service: prowlarr-prod-1
      traefik.http.routers.prowlarr-prod-1-http.entrypoints: web
      traefik.http.routers.prowlarr-prod-1-http.rule: Host(`prowlarr.lhr1.jakerob.pro`)
      traefik.http.routers.prowlarr-prod-1-http.middlewares: "websecure-redirect-permanent@file"
      traefik.http.routers.prowlarr-prod-1-https.entrypoints: websecure
      traefik.http.routers.prowlarr-prod-1-https.rule: Host(`prowlarr.lhr1.jakerob.pro`)
      traefik.http.routers.prowlarr-prod-1-https.tls: true
      traefik.http.routers.prowlarr-prod-1-https.tls.certresolver: cloudflare
      traefik.http.services.radarr-prod-1.loadBalancer.server.port: 7878
      traefik.http.routers.radarr-prod-1-http.service: radarr-prod-1
      traefik.http.routers.radarr-prod-1-https.service: radarr-prod-1
      traefik.http.routers.radarr-prod-1-http.entrypoints: web
      traefik.http.routers.radarr-prod-1-http.rule: Host(`radarr.lhr1.jakerob.pro`)
      traefik.http.routers.radarr-prod-1-http.middlewares: "websecure-redirect-permanent@file"
      traefik.http.routers.radarr-prod-1-https.entrypoints: websecure
      traefik.http.routers.radarr-prod-1-https.rule: Host(`radarr.lhr1.jakerob.pro`)
      traefik.http.routers.radarr-prod-1-https.tls: true
      traefik.http.routers.radarr-prod-1-https.tls.certresolver: cloudflare
      traefik.http.services.sonarr-prod-1.loadBalancer.server.port: 8989
      traefik.http.routers.sonarr-prod-1-http.service: sonarr-prod-1
      traefik.http.routers.sonarr-prod-1-https.service: sonarr-prod-1
      traefik.http.routers.sonarr-prod-1-http.entrypoints: web
      traefik.http.routers.sonarr-prod-1-http.rule: Host(`sonarr.lhr1.jakerob.pro`)
      traefik.http.routers.sonarr-prod-1-http.middlewares: "websecure-redirect-permanent@file"
      traefik.http.routers.sonarr-prod-1-https.entrypoints: websecure
      traefik.http.routers.sonarr-prod-1-https.rule: Host(`sonarr.lhr1.jakerob.pro`)
      traefik.http.routers.sonarr-prod-1-https.tls: true
      traefik.http.routers.sonarr-prod-1-https.tls.certresolver: cloudflare
      traefik.http.services.bazarr-prod-1.loadBalancer.server.port: 6767
      traefik.http.routers.bazarr-prod-1-http.service: bazarr-prod-1
      traefik.http.routers.bazarr-prod-1-https.service: bazarr-prod-1
      traefik.http.routers.bazarr-prod-1-http.entrypoints: web
      traefik.http.routers.bazarr-prod-1-http.rule: Host(`bazarr.lhr1.jakerob.pro`)
      traefik.http.routers.bazarr-prod-1-http.middlewares: "websecure-redirect-permanent@file"
      traefik.http.routers.bazarr-prod-1-https.entrypoints: websecure
      traefik.http.routers.bazarr-prod-1-https.rule: Host(`bazarr.lhr1.jakerob.pro`)
      traefik.http.routers.bazarr-prod-1-https.tls: true
      traefik.http.routers.bazarr-prod-1-https.tls.certresolver: cloudflare

  qbittorrent:
    image: 11notes/qbittorrent:5
    container_name: qbittorrent
    read_only: true
    security_opt:
      - no-new-privileges:true
    depends_on:
      - gluetun
    restart: unless-stopped
    environment:
      PUID: '1000'
      PGID: '1000'
      TZ: Europe/London
      WEBUI_PORT: '8080'
    volumes:
      - ./qbittorrent-config/etc:/qbittorrent/etc
      - ./qbittorrent-config/var:/qbittorrent/var
      - /media/jellydata/torrents:/jellydata/torrents:rw
    ## Do Not Change Network for qBittorrent
    ## qBittorrent MUST always use a VPN / Secure Internet connection
    network_mode: service:gluetun

  radarr:
    image: 11notes/radarr:5
    container_name: radarr
    read_only: true
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    environment:
      TZ: "${TZ:-Europe/London}"
    volumes:
      - ./radarr-config:/radarr/etc/
      - /media/jellydata:/jellydata
    tmpfs:
      # required for read-only image
      - /tmp:uid=1000,gid=1000
    logging:
      driver: json-file
    network_mode: service:gluetun

  sonarr:
    image: 11notes/sonarr:4
    container_name: sonarr
    read_only: true
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    environment:
      TZ: "${TZ:-Europe/London}"
    volumes:
      - ./sonarr-config:/sonarr/etc/
      - /media/jellydata:/jellydata
    tmpfs:
      # required for read-only image
      - /tmp:uid=1000,gid=1000
    logging:
      driver: json-file
    network_mode: service:gluetun

  bazarr:
    image: lscr.io/linuxserver/bazarr:1.4.5
    container_name: bazarr
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    environment:
      PUID: '1000'
      PGID: '1000'
      TZ: Europe/London
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./bazarr-config:/config
      - /media/jellydata/media:/jellydata/media
    logging:
      driver: json-file
    network_mode: service:gluetun

  prowlarr:
    image: 11notes/prowlarr:1
    container_name: prowlarr
    read_only: true
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    environment:
      TZ: "${TZ:-Europe/London}"
    volumes:
      - ./prowlarr-config:/prowlarr/etc/
    tmpfs:
      # required for read-only image
      - /tmp:uid=1000,gid=1000
    network_mode: service:gluetun

  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:v3.4.2
    container_name: flaresolverr
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    environment:
      LOG_LEVEL: "${LOG_LEVEL:-info}"
      LOG_HTML: "${LOG_HTML:-false}"
      CAPTCHA_SOLVER: "${CAPTCHA_SOLVER:-none}"
      TZ: Europe/London
    network_mode: service:gluetun

  tdarr:
    image: ghcr.io/haveagitgat/tdarr:latest
    container_name: tdarr
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    ports:
      - 8266:8266 # server port
    environment:
      TZ: Europe/London
      PUID: "${PUID:-1000}"
      PGID: "${PGID:-1000}"
      UMASK_SET: '002'
      serverIP: 0.0.0.0
      serverPort: '8266'
      webUIPort: '8265'
      internalNode: "true"
      inContainer: "true"
      ffmpegVersion: '7'
      nodeName: lhr1-node-1
      auth: "false"
      openBrowser: "true"
      maxLogSizeMB: '10'
      cronPluginUpdate: ""
      NVIDIA_DRIVER_CAPABILITIES: all
      NVIDIA_VISIBLE_DEVICES: all
    networks:
      - frontend
    devices:
      - /dev/dri:/dev/dri
    volumes:
      - ./tdarr-config/server:/app/server
      - ./tdarr-config/configs:/app/configs
      - ./tdarr-config/logs:/app/logs
      - /media/jellydata/media:/media:rw
      - ./tdarr-config/transcode-cache:/temp
    labels:
      traefik.enable: true
      traefik.docker.network: frontend
      traefik.http.services.tdarr-prod-1.loadBalancer.server.port: 8265
      traefik.http.routers.tdarr-prod-1-http.entrypoints: web
      traefik.http.routers.tdarr-prod-1-http.rule: Host(`tdarr.lhr1.jakerob.pro`)
      traefik.http.routers.tdarr-prod-1-http.middlewares: "websecure-redirect-permanent@file"
      traefik.http.routers.tdarr-prod-1-https.entrypoints: websecure
      traefik.http.routers.tdarr-prod-1-https.rule: Host(`tdarr.lhr1.jakerob.pro`)
      traefik.http.routers.tdarr-prod-1-https.tls: true
      traefik.http.routers.tdarr-prod-1-https.tls.certresolver: cloudflare

  # sabnzbd:
  #   container_name: sabnzbd
  #   image: lscr.io/linuxserver/sabnzbd:4.3.1
  #   restart: unless-stopped
  #   logging:
  #     driver: json-file
  #   ports:
  #     # - 8080:8080
  #     - 9090:9090
  #   networks:
  #     - internal
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=Europe/London
  #   volumes:
  #     - /etc/localtime:/etc/localtime:ro
  #     - ./sabnzbd-config:/config
  #     - /media/jellydata/usenet:/jellydata/usenet:rw

  # debug2:
  #   image: jonlabelle/network-tools
  #   container_name: debug2
  #   stdin_open: true
  #   tty: true

  # debug:
  #   image: jonlabelle/network-tools
  #   container_name: debug
  #   stdin_open: true
  #   tty: true
  #   network_mode: "service:gluetun"
