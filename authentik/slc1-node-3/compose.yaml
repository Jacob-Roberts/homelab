---
name: authentik

networks:
  frontend:
    external: true
  internal:
    external: false

volumes:
  database:
    driver: local
    name: authentik-db
  redis:
    driver: local
    name: authentik-redis

services:
  postgres:
    image: postgres:16.10
    container_name: authentik-db
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    healthcheck:
      test: [CMD-SHELL, "pg_isready -d \"${POSTGRES_DB}\" -U \"${POSTGRES_USER}\""]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
      TZ: "${TZ:-UTC}"
    networks:
      - internal
    volumes:
      - database:/var/lib/postgresql/data
  redis:
    image: redis:7.2.4
    container_name: authentik-redis
    command: "--save 60 1 --loglevel warning"
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    healthcheck:
      test: [CMD-SHELL, "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    networks:
      - internal
    volumes:
      - redis:/data
  server:
    image: ghcr.io/goauthentik/server:2024.12
    container_name: authentik-server
    command: server
    user: 1000:1000
    security_opt:
      - no-new-privileges:true
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgres
      AUTHENTIK_POSTGRESQL__USER: "${POSTGRES_USER}"
      AUTHENTIK_POSTGRESQL__NAME: "${POSTGRES_DB}"
      AUTHENTIK_POSTGRESQL__PASSWORD: "${POSTGRES_PASSWORD}"
      # (Required)  To generate a secret key run the following command:
      #             echo $(openssl rand -base64 32)
      AUTHENTIK_SECRET_KEY: "${AUTHENTIK_SECRET_KEY}"
      # (Optional)  Enable Error Reporting
      # - AUTHENTIK_ERROR_REPORTING__ENABLED=${AUTHENTIK_ERROR_REPORTING:-false}
      # (Optional)  Enable Email Sending
      AUTHENTIK_EMAIL__HOST: "${EMAIL_HOST}"
      AUTHENTIK_EMAIL__PORT: "${EMAIL_PORT}"
      AUTHENTIK_EMAIL__USERNAME: "${EMAIL_USERNAME}"
      AUTHENTIK_EMAIL__PASSWORD: "${EMAIL_PASSWORD}"
      AUTHENTIK_EMAIL__USE_TLS: true
      AUTHENTIK_EMAIL__USE_SSL: false
      # - AUTHENTIK_EMAIL__TIMEOUT=${EMAIL_TIMEOUT:-10}
      AUTHENTIK_EMAIL__FROM: "${EMAIL_FROM}"
    networks:
      - frontend
      - internal
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
    labels:
      traefik.enable: true
      traefik.docker.network: frontend
      traefik.http.services.authentik-prod-1.loadBalancer.server.port: 9000
      traefik.http.routers.authentik-prod-1-http.entrypoints: web
      traefik.http.routers.authentik-prod-1-http.rule: Host(`authentik.slc1.jakerob.pro`)
      traefik.http.routers.authentik-prod-1-http.middlewares: "authentik-headers,websecure-redirect-permanent@file"
      traefik.http.middlewares.authentik-headers.headers.customResponseHeaders.Strict-Transport-Security: max-age=15552000; includeSubDomains
      traefik.http.routers.authentik-prod-1-https.entrypoints: websecure
      traefik.http.routers.authentik-prod-1-https.middlewares: authentik-headers
      traefik.http.routers.authentik-prod-1-https.rule: Host(`authentik.slc1.jakerob.pro`)
      traefik.http.routers.authentik-prod-1-https.tls: true
      traefik.http.routers.authentik-prod-1-https.tls.certresolver: cloudflare
  worker:
    image: ghcr.io/goauthentik/server:2024.12
    container_name: authentik-worker
    command: worker
    user: 1000:1000
    security_opt:
      - no-new-privileges:true
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgres
      AUTHENTIK_POSTGRESQL__USER: "${POSTGRES_USER}"
      AUTHENTIK_POSTGRESQL__NAME: "${POSTGRES_DB}"
      AUTHENTIK_POSTGRESQL__PASSWORD: "${POSTGRES_PASSWORD}"
      # (Required)  To generate a secret key run the following command:
      #             echo $(openssl rand -base64 32)
      AUTHENTIK_SECRET_KEY: "${AUTHENTIK_SECRET_KEY}"
      # (Optional)  Enable Error Reporting
      # AUTHENTIK_ERROR_REPORTING__ENABLED=${AUTHENTIK_ERROR_REPORTING:-false}
      # (Optional)  Enable Email Sending
      AUTHENTIK_EMAIL__HOST: "${EMAIL_HOST}"
      AUTHENTIK_EMAIL__PORT: "${EMAIL_PORT}"
      AUTHENTIK_EMAIL__USERNAME: "${EMAIL_USERNAME}"
      AUTHENTIK_EMAIL__PASSWORD: "${EMAIL_PASSWORD}"
      AUTHENTIK_EMAIL__USE_TLS: true
      AUTHENTIK_EMAIL__USE_SSL: false
      # - AUTHENTIK_EMAIL__TIMEOUT=${EMAIL_TIMEOUT:-10}
      AUTHENTIK_EMAIL__FROM: "${EMAIL_FROM}"
    # (Optional)  When using the docker socket integration
    #             See more for the docker socket integration here:
    #             https://goauthentik.io/docs/outposts/integrations/docker
    # user: root
    networks:
      - internal
    volumes:
      # (Optional)  When using the docker socket integration
      # - /var/run/docker.sock:/var/run/docker.sock
      - ./media:/media
      - ./certs:/certs
      - ./custom-templates:/templates
