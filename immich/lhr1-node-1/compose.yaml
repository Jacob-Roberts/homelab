---
name: immich

networks:
    frontend:
        external: true
    internal:
        external: false

services:
    immich-server:
        container_name: immich-server
        image: ghcr.io/immich-app/immich-server:v1.132.3
        devices:
            - /dev/dri:/dev/dri
        volumes:
            - /media/immich:/usr/src/app/upload
            - /etc/localtime:/etc/localtime:ro
        user: 1000:1000
        environment:
            - DB_PASSWORD=${DB_PASSWORD}
            - DB_USERNAME=${DB_USERNAME}
            - DB_HOSTNAME=database
            - DB_DATABASE_NAME=${DB_DATABASE_NAME}
            - REDIS_HOSTNAME=cache
        healthcheck:
            disable: false
        depends_on:
            - cache
            - database
        networks:
            - frontend
            - internal
        restart: unless-stopped
        security_opt:
            - no-new-privileges:true
        labels:
            traefik.enable: true
            traefik.docker.network: frontend
            traefik.http.routers.immich-prod-1-http.entrypoints: web
            traefik.http.routers.immich-prod-1-http.rule: Host(`photos.jakerob.pro`)
            traefik.http.routers.immich-prod-1-http.middlewares: websecure-redirect-permanent@file
            traefik.http.routers.immich-prod-1-https.entrypoints: websecure
            traefik.http.routers.immich-prod-1-https.rule: Host(`photos.jakerob.pro`)
            traefik.http.routers.immich-prod-1-https.tls: true
            traefik.http.routers.immich-prod-1-https.tls.certresolver: cloudflare

    immich-machine-learning:
        container_name: immich-machine-learning
        # For hardware acceleration, add one of -[armnn, cuda, openvino] to the image tag.
        # Example tag: ${IMMICH_VERSION:-release}-cuda
        image: ghcr.io/immich-app/immich-machine-learning:v1.132.3
        # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration
        #   file: hwaccel.ml.yml
        #   service: cpu # set to one of [armnn, cuda, openvino, openvino-wsl] for accelerated inference - use the `-wsl` version for WSL2 where applicable
        volumes:
            - ./model-cache:/cache
        networks:
            - internal
        user: 1000:1000
        environment:
            - DB_PASSWORD=${DB_PASSWORD}
            - DB_USERNAME=${DB_USERNAME}
            - DB_HOSTNAME=database
            - DB_DATABASE_NAME=${DB_DATABASE_NAME}
            - REDIS_HOSTNAME=cache
        restart: unless-stopped
        security_opt:
            - no-new-privileges:true
        healthcheck:
            disable: false

    cache:
        container_name: immich-cache
        image: docker.io/valkey/valkey:8-bookworm@sha256:42cba146593a5ea9a622002c1b7cba5da7be248650cbb64ecb9c6c33d29794b1
        restart: unless-stopped
        healthcheck:
            test: redis-cli ping || exit 1
        networks:
            - internal

    database:
        container_name: immich-database
        image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:739cdd626151ff1f796dc95a6591b55a714f341c737e27f045019ceabf8e8c52
        user: 1000:1000
        environment:
            - POSTGRES_PASSWORD=${DB_PASSWORD}
            - POSTGRES_USER=${DB_USERNAME}
            - POSTGRES_DB=${DB_DATABASE_NAME}
            - POSTGRES_INITDB_ARGS='--data-checksums'
        volumes:
            - ./database:/var/lib/postgresql/data
        healthcheck:
            test: pg_isready --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' || exit 1; Chksum="$$(psql --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')"; echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
            interval: 5m
            start_interval: 30s
            start_period: 5m
        networks:
            - internal
        restart: unless-stopped
        command:
            [
                "postgres",
                "-c",
                "shared_preload_libraries=vectors.so",
                "-c",
                'search_path="$$user", public, vectors',
                "-c",
                "logging_collector=on",
                "-c",
                "max_wal_size=2GB",
                "-c",
                "shared_buffers=512MB",
                "-c",
                "wal_compression=on",
            ]
