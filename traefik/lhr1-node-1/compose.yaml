---
name: traefik

networks:
  frontend:
    # Contains all the services that will be routed to
    external: true
  internal:
    # Contains traefik, socket proxy, and traefik-tunnel
    external: false
    name: traefik_internal
  tunnel:
    # Contains all the services that will be routed to through the tunnel
    external: true

volumes:
  socket-proxy:

services:
  traefik:
    image: 11notes/traefik:3
    container_name: traefik-prod-1
    depends_on:
      socket-proxy:
        condition: service_healthy
        restart: true
    ports:
      - 192.168.42.16:80:80
      - 192.168.42.16:443:443
    security_opt:
      - no-new-privileges:true
    volumes:
      - ./config/traefik.yaml:/etc/traefik/traefik.yaml:ro
      - ./config/conf/:/etc/traefik/conf/:ro
      - ./config/certs/:/etc/traefik/certs/
      - "socket-proxy:/var/run"
    environment:
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
    sysctls:
      # allow rootless container to access ports < 1024
      net.ipv4.ip_unprivileged_port_start: 80
    networks:
      - frontend
      - internal
    labels:
      traefik.enable: true
      traefik.http.routers.traefik-prod-1-http.service: api@internal
      traefik.http.routers.traefik-prod-1-https.service: api@internal
      traefik.http.routers.traefik-prod-1-http.entrypoints: web
      traefik.http.routers.traefik-prod-1-http.rule: Host(`traefik.lhr1.jakerob.pro`)
      traefik.http.routers.traefik-prod-1-http.middlewares: websecure-redirect-permanent@file
      traefik.http.routers.traefik-prod-1-https.entrypoints: websecure
      traefik.http.routers.traefik-prod-1-https.rule: Host(`traefik.lhr1.jakerob.pro`)
      traefik.http.routers.traefik-prod-1-https.tls: true
      traefik.http.routers.traefik-prod-1-https.tls.certresolver: cloudflare
    restart: unless-stopped

  traefik-certs-dumper:
    image: ldez/traefik-certs-dumper:v2.9.3
    entrypoint: sh -c '
      while ! [ -e /certs/cloudflare-acme.json ]
      || ! [ `jq ".[] | .Certificates | length" /certs/cloudflare-acme.json | jq -s "add" ` != 0 ]; do
      sleep 1
      ; done
      && traefik-certs-dumper file --version v3 
        --watch
        --domain-subdir=true
        --source /certs/cloudflare-acme.json
        --dest /etc/traefik/certs
        --post-hook "sh /extract-certs.sh"'
    volumes:
      - ./config/certs/:/certs
      - ./extract-certs.sh:/extract-certs.sh
      - ./synced-certs/:/synced-certs

  traefik-tunnel:
    image: 11notes/traefik:3
    container_name: traefik-tunnel
    ports:
      # Bind on Tailscale interface only
      - 100.89.27.79:80:80
      - 100.89.27.79:443:443
    security_opt:
      - no-new-privileges:true
    volumes:
      - ./config-tunnel/traefik.yaml:/etc/traefik/traefik.yaml:ro
      - ./config-tunnel/conf/:/etc/traefik/conf/:ro
    networks:
      - tunnel
      - internal
    labels:
      traefik.enable: true
      traefik.docker.network: traefik_internal
      traefik.http.services.traefiktunnel-prod-1.loadBalancer.server.port: 8080 # TODO: Expose this securely
      traefik.http.routers.traefiktunnel-prod-1-http.entrypoints: web
      traefik.http.routers.traefiktunnel-prod-1-http.rule: Host(`traefik-tunnel.lhr1.jakerob.pro`)
      traefik.http.routers.traefiktunnel-prod-1-http.middlewares: websecure-redirect-permanent@file
      traefik.http.routers.traefiktunnel-prod-1-https.entrypoints: websecure
      traefik.http.routers.traefiktunnel-prod-1-https.rule: Host(`traefik-tunnel.lhr1.jakerob.pro`)
      traefik.http.routers.traefiktunnel-prod-1-https.tls: true
      traefik.http.routers.traefiktunnel-prod-1-https.tls.certresolver: cloudflare
    restart: unless-stopped

  socket-proxy:
    image: "11notes/socket-proxy:2"
    container_name: traefik-socket-proxy
    read_only: true
    user: 0:990
    networks:
      - internal
    environment:
      - ALLOW_START=0 #optional
      - ALLOW_STOP=0 #optional
      - ALLOW_RESTARTS=0 #optional
      - AUTH=0 #optional
      - BUILD=0 #optional
      - COMMIT=0 #optional
      - CONFIGS=0 #optional
      - CONTAINERS=1 #optional
      - DISABLE_IPV6=0 #optional
      - DISTRIBUTION=0 #optional
      - EVENTS=1 #optional
      - EXEC=0 #optional
      - IMAGES=0 #optional
      - INFO=0 #optional
      - NETWORKS=1 #optional
      - NODES=0 #optional
      - PING=1 #optional
      - POST=0 #optional
      - PLUGINS=0 #optional
      - SECRETS=0 #optional
      - SERVICES=1 #optional
      - SESSION=0 #optional
      - SWARM=0 #optional
      - SYSTEM=0 #optional
      - TASKS=1 #optional
      - VERSION=1 #optional
      - VOLUMES=0 #optional
    volumes:
      # mount host docker socket, the :ro does not mean read-only for the socket, just for the actual file
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # this socket is run as 1000:1000, not as root!
      - socket-proxy:/run/proxy
    restart: unless-stopped

  whoami:
    image: traefik/whoami
    container_name: whoami-prod-1
    networks:
      - frontend
    security_opt:
      - no-new-privileges:true
    command: --verbose
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.routers.whoami-prod-1-http.entrypoints: web
      traefik.http.routers.whoami-prod-1-http.rule: Host(`whoami.lhr1.jakerob.pro`)
      traefik.http.routers.whoami-prod-1-http.middlewares: websecure-redirect-permanent@file
      traefik.http.routers.whoami-prod-1-https.entrypoints: websecure
      traefik.http.routers.whoami-prod-1-https.rule: Host(`whoami.lhr1.jakerob.pro`)
      traefik.http.routers.whoami-prod-1-https.tls: true
      traefik.http.routers.whoami-prod-1-https.tls.certresolver: cloudflare
